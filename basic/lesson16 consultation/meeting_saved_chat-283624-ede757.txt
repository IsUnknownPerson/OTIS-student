20:00:10 From Алексей Мурзин to Everyone:
	+
20:00:12 From Артём to Everyone:
	+
20:00:34 From Владимир Морозов to Everyone:
	+
20:00:40 From Артём to Everyone:
	звук если можно немного погромче
20:01:02 From Хроменок Роман to Everyone:
	норм
20:01:03 From Артём to Everyone:
	нет помех, немного тихо
20:01:05 From Алексей Мурзин to Everyone:
	Отлично слышно
20:04:05 From Артём to Everyone:
	а вектор уменьшается по мере удаления элементов? или если его растянуть на 100 000 элементов, а потом всё удалить кроме 10, он так и останется занимать память на все 100 000?
20:06:31 From Артём to Everyone:
	что из себя представляет итератор? как его написать в своем самописном классе?
20:08:59 From Артём to Everyone:
	а у нас сейчас как раз это задание
20:09:56 From Artyom to Everyone:
	по 4 домашке вопрос и ее реализации
20:10:36 From Artyom to Everyone:
	инженерный калькулятор
20:11:01 From Artyom to Everyone:
	там врпринципе не особо понятна
20:11:47 From Артём to Everyone:
	это же скорее даже не калькулятор, а интерпретатор, верно?
20:18:22 From Артём to Everyone:
	не видно
20:18:27 From Хроменок Роман to Everyone:
	нет рисовалки
20:19:11 From Артём to Everyone:
	да
20:19:12 From Владимир Морозов to Everyone:
	+
20:28:32 From Владимир Морозов to Everyone:
	Про рисовалку)
20:38:26 From Артём to Everyone:
	тут вопрос скорее про то, что делать, если нужно в этом легаси добавить какой то новый функционал
20:41:18 From Artyom to Everyone:
	про массивы расскажите пожалуйста
20:42:18 From Артём to Everyone:
	как правильно реализовывать логирование? есть какие то принципы, best practices или вроде того?
20:43:19 From Artyom to Everyone:
	vector
20:44:48 From Хроменок Роман to Everyone:
	ситемные вызовы
20:45:20 From Хроменок Роман to Everyone:
	это я про логирование
20:46:02 From Хроменок Роман to Everyone:
	не через них
20:46:06 From Хроменок Роман to Everyone:
	в ал писать
20:46:09 From Хроменок Роман to Everyone:
	файл
20:46:15 From Хроменок Роман to Everyone:
	писать черрз них
20:46:31 From Хроменок Роман to Everyone:
	быстрее будет
20:47:08 From Хроменок Роман to Everyone:
	просто не всегда их можно использовать
20:49:12 From Liliya to Everyone:
	Евгений, вопрос именно про спецификацию шаблона, зачем делать его спецификацию для конкретного типа?
20:50:07 From Artyom to Everyone:
	расскажите пожалуйста как добавлять в вектор, знаю что есть .append и push back и в чем разница между ними
20:51:49 From Владимир Морозов to Everyone:
	зум вроде не лагает
20:51:52 From Artyom to Everyone:
	нет
20:51:57 From Артём to Everyone:
	вроде нормально все было
20:53:39 From Liliya to Everyone:
	но можно же в этом случае просто перегрузить функцию а не делать такую спецификацию
20:57:19 From Артём to Everyone:
	получается этот класс Х может принимать только специфический тип данных, у которого есть этот метод get_capacity()?
21:00:42 From Артём to Everyone:
	а insert менее эффективный, чем push_back? я думал это примерно одно и то же, только вставка в разное место осуществляется
21:05:01 From Хроменок Роман to Everyone:
	нет рисолки
21:05:02 From Artyom to Everyone:
	такой вопрос как можно разобрать строку из массива по символам, то есть например у мен есть массив из 5 строк и мне нужно 1 строку разобрать по символам, то как мне это сделать
21:07:11 From Артём to Everyone:
	std::string str = "qwerty";		for (char ch : std::string str) {	    … ch; - отдельный символ строки	}
21:07:26 From Хроменок Роман to Everyone:
	появилась
21:07:26 From Артём to Everyone:
	есть рисовалка
21:07:28 From Хроменок Роман to Everyone:
	да
21:09:07 From Артём to Everyone:
	а список разве не менее эффективен, чем вектор?
21:11:19 From Artyom to Everyone:
	рандомно взял
21:12:22 From Артём to Everyone:
	как вы сказали улучшили бы разбор строки? не разобрал. можете написать?
21:18:32 From Артём to Everyone:
	это было продолжение предыдущего вопроса. в питоне есть подобный функционал через (*args, **kwargs):		еще интересно узнать, как можно передать (и можно ли) неопределенное количество параметров в функцию. не перегрузкой функции отдельно для одного, двух, трёх, а так, чтобы можно было передать в функцию хоть 2, хоть 100 параметров одинакового типа	без использования готовых структур типа вектора, а именно по значению. типа такого:		func(1);	func(1, 2, 3, 4);	func(1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
21:19:23 From Хроменок Роман to Everyone:
	class My_error final : public std::exception { public:     My_error(const std::string &message) : message{message} {}     const char *what() const noexcept override { return message.c_str(); } // message     My_error(const My_error &&err) = delete;                               // move del     My_error operator=(My_error &err) = delete;                            // = del     My_error(const My_error &err) = delete;                                // copy del private:     std::string message; // message };
21:20:05 From Артём to Everyone:
	не, не в рантайме, просто в коде
21:41:54 From Артём to Everyone:
	потрясающе
21:43:41 From Артём to Everyone:
	ну мне интересен был способ подавать именно одинаковые по типу переменные, чтобы их можно было внутри функции перебрать в цикле
21:44:22 From Владимир Морозов to Everyone:
	ну мне интересен был способ подавать именно одинаковые по типу переменные, чтобы их можно было внутри функции перебрать в цикле	Передать в функцию ссылку на список?
21:46:12 From Артём to Everyone:
	то есть все равно приходится передавать отдельной переменной количесвто передаваемых переменных
21:46:20 From Артём to Everyone:
	хотел от этого избавиться
21:46:44 From Владимир Морозов to Everyone:
	Если ссылку на список передать - то у последнего элемента не будет ссылки на следующий.
21:46:57 From Владимир Морозов to Everyone:
	Легко проверить прямо внутри
21:47:29 From Артём to Everyone:
	Replying to "Если ссылку на списо..."
	
	хотелось понять, как это можно сделать без использования каких то промежуточных контейнеров
21:47:47 From Артём to Everyone:
	-
21:47:47 From Хроменок Роман to Everyone:
	-
21:47:59 From Артём to Everyone:
	спасибо, очень интересно
21:48:04 From Владимир Морозов to Everyone:
	Спасибо.
